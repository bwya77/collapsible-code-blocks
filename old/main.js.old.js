/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CollapsibleCodeBlockPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultCollapsed: false,
  collapseIcon: "\u25BC",
  expandIcon: "\u25B6",
  enableHorizontalScroll: true,
  collapsedLines: 0
};
var CollapsibleCodeBlockPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.updateScrollSetting();
    this.viewportObserver = new IntersectionObserver(
      (entries) => entries.forEach((entry) => {
        if (entry.isIntersecting && entry.target instanceof HTMLElement) {
          this.updateCodeBlockVisibility(entry.target);
        }
      }),
      { rootMargin: "100px", threshold: [0, 0.5, 1] }
    );
    this.contentObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === "childList") {
          this.processNewCodeBlocks(mutation.target);
        }
      });
    });
    this.registerMarkdownPostProcessor((element) => {
      this.processNewCodeBlocks(element);
      this.contentObserver.observe(element, { childList: true, subtree: true });
    });
    this.addSettingTab(new CollapsibleCodeBlockSettingsTab(this.app, this));
  }
  processNewCodeBlocks(element) {
    element.querySelectorAll("pre:not(.has-collapse-button)").forEach((pre) => {
      if (!(pre instanceof HTMLElement))
        return;
      pre.classList.add("has-collapse-button");
      this.setupCodeBlock(pre);
      this.viewportObserver.observe(pre);
    });
  }
  setupCodeBlock(pre) {
    document.documentElement.style.setProperty("--collapsed-lines", this.settings.collapsedLines.toString());
    const toggleButton = this.createToggleButton();
    pre.insertBefore(toggleButton, pre.firstChild);
    if (this.settings.defaultCollapsed) {
      pre.classList.add("collapsed");
      toggleButton.textContent = this.settings.expandIcon;
      this.updateCodeBlockVisibility(pre);
    }
  }
  createToggleButton() {
    const button = document.createElement("div");
    button.className = "code-block-toggle";
    button.textContent = this.settings.collapseIcon;
    button.setAttribute("role", "button");
    button.setAttribute("tabindex", "0");
    button.setAttribute("aria-label", "Toggle code block visibility");
    const toggleHandler = (e) => {
      e.preventDefault();
      const pre = e.target.closest("pre");
      if (!pre)
        return;
      pre.classList.toggle("collapsed");
      this.updateCodeBlockVisibility(pre);
      const isCollapsed = pre.classList.contains("collapsed");
      button.textContent = isCollapsed ? this.settings.expandIcon : this.settings.collapseIcon;
      button.setAttribute("aria-expanded", (!isCollapsed).toString());
      this.app.workspace.requestSaveLayout();
    };
    button.addEventListener("click", toggleHandler);
    button.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        toggleHandler(e);
      }
    });
    return button;
  }
  updateCodeBlockVisibility(pre) {
    var _a;
    const isCollapsed = pre.classList.contains("collapsed");
    let elements = [];
    let curr = pre.nextElementSibling;
    while (curr && !(curr instanceof HTMLPreElement)) {
      if (curr instanceof HTMLElement) {
        elements.push(curr);
        if (!curr.dataset.originalDisplay) {
          curr.dataset.originalDisplay = getComputedStyle(curr).display;
        }
      }
      curr = curr.nextElementSibling;
    }
    const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if ((_a = markdownView == null ? void 0 : markdownView.previewMode) == null ? void 0 : _a.containerEl) {
      const previewElement = markdownView.previewMode.containerEl;
      setTimeout(() => {
        elements.forEach((el) => {
          if (isCollapsed) {
            el.classList.add("element-hidden");
            el.classList.remove("element-visible", "element-spacing");
          } else {
            el.classList.remove("element-hidden");
            el.classList.add("element-visible");
            const preRect = pre.getBoundingClientRect();
            const elRect = el.getBoundingClientRect();
            if (elRect.top < preRect.bottom) {
              document.documentElement.style.setProperty("--element-spacing", `${preRect.bottom - elRect.top + 10}px`);
              el.classList.add("element-spacing");
            }
          }
        });
        void previewElement.offsetHeight;
        previewElement.dispatchEvent(new Event("scroll", { bubbles: true }));
        window.dispatchEvent(new Event("resize"));
        const currentScroll = previewElement.scrollTop;
        if (currentScroll > 0) {
          previewElement.scrollTop = currentScroll - 1;
          requestAnimationFrame(() => {
            previewElement.scrollTop = currentScroll;
            setTimeout(() => {
              previewElement.dispatchEvent(new Event("scroll", { bubbles: true }));
            }, 50);
          });
        } else {
          previewElement.scrollTop = 1;
          requestAnimationFrame(() => {
            previewElement.scrollTop = 0;
            setTimeout(() => {
              previewElement.dispatchEvent(new Event("scroll", { bubbles: true }));
            }, 50);
          });
        }
      }, 50);
    }
  }
  updateScrollSetting() {
    document.body.classList.toggle("horizontal-scroll", this.settings.enableHorizontalScroll);
  }
  sanitizeIcon(icon) {
    const cleaned = icon.trim();
    return cleaned.length <= 2 ? cleaned : DEFAULT_SETTINGS.collapseIcon;
  }
  async loadSettings() {
    var _a, _b;
    const loadedData = await this.loadData();
    this.settings = {
      ...DEFAULT_SETTINGS,
      ...loadedData,
      // Sanitize icons when loading
      collapseIcon: this.sanitizeIcon((_a = loadedData == null ? void 0 : loadedData.collapseIcon) != null ? _a : DEFAULT_SETTINGS.collapseIcon),
      expandIcon: this.sanitizeIcon((_b = loadedData == null ? void 0 : loadedData.expandIcon) != null ? _b : DEFAULT_SETTINGS.expandIcon)
    };
  }
  async saveSettings() {
    this.settings.collapseIcon = this.sanitizeIcon(this.settings.collapseIcon);
    this.settings.expandIcon = this.sanitizeIcon(this.settings.expandIcon);
    await this.saveData(this.settings);
  }
  onunload() {
    var _a, _b;
    (_a = this.contentObserver) == null ? void 0 : _a.disconnect();
    (_b = this.viewportObserver) == null ? void 0 : _b.disconnect();
  }
};
var CollapsibleCodeBlockSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Collapsible Code Block Settings" });
    new import_obsidian.Setting(containerEl).setName("Default Collapsed State").setDesc("Should code blocks be collapsed by default?").addToggle((toggle) => toggle.setValue(this.plugin.settings.defaultCollapsed).onChange(async (value) => {
      this.plugin.settings.defaultCollapsed = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Collapse Icon").setDesc("Icon to show when code block is expanded (single character or emoji only)").addText((text) => text.setValue(this.plugin.settings.collapseIcon).onChange(async (value) => {
      const sanitized = value.trim();
      if (sanitized.length <= 2) {
        this.plugin.settings.collapseIcon = sanitized || DEFAULT_SETTINGS.collapseIcon;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName("Expand Icon").setDesc("Icon to show when code block is collapsed (single character or emoji only)").addText((text) => text.setValue(this.plugin.settings.expandIcon).onChange(async (value) => {
      const sanitized = value.trim();
      if (sanitized.length <= 2) {
        this.plugin.settings.expandIcon = sanitized || DEFAULT_SETTINGS.expandIcon;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName("Enable Horizontal Scrolling").setDesc("Allow code blocks to scroll horizontally instead of wrapping text.").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableHorizontalScroll).onChange(async (value) => {
      this.plugin.settings.enableHorizontalScroll = value;
      await this.plugin.saveSettings();
      this.plugin.updateScrollSetting();
    }));
    const collapsedLinesSetting = new import_obsidian.Setting(containerEl).setName("Collapsed Lines").setDesc("Number of lines visible when code block is collapsed");
    let reloadButton = null;
    collapsedLinesSetting.addButton((btn) => {
      reloadButton = btn.setButtonText("Apply changes (reload plugin)").setCta();
      reloadButton.buttonEl.classList.add("hidden");
      reloadButton.onClick(async () => {
        const pluginId = this.plugin.manifest.id;
        await this.app.plugins.disablePlugin(pluginId);
        await this.app.plugins.enablePlugin(pluginId);
        this.app.setting.openTabById(pluginId);
      });
    });
    collapsedLinesSetting.addText((text) => {
      text.setValue(this.plugin.settings.collapsedLines.toString()).onChange(async (value) => {
        const numericValue = parseInt(value, 10);
        this.plugin.settings.collapsedLines = isNaN(numericValue) || numericValue < 0 ? 0 : numericValue;
        await this.plugin.saveSettings();
        if (reloadButton) {
          reloadButton.buttonEl.classList.remove("hidden");
        }
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
